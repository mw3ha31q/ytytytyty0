---
// src/pages/index.astro
import UploadForm from '../components/UploadForm.astro';
import { loadAccounts, fetchVideoCount } from '../lib/youtube.js';

// Get user from request (set by middleware)
const user = Astro.request.user;

// If no user (shouldn't happen due to middleware), redirect to login
if (!user) {
  return Astro.redirect('/login');
}

const accounts = loadAccounts();
const accountEmails = Object.keys(accounts);

// Prepare account data for the tables
const accountsList = accountEmails.map((email) => {
  return {
    email,
    connected: !!accounts[email].token,
    videos: accounts[email].video_count || 0,  // Use cached only
    suspended: accounts[email].suspended || false,
    lastUpdated: accounts[email].last_updated || null,
    suspended: !!accounts[email].suspended,
    loading: true  // Add this flag
  };
});

// Sort by least to most videos
accountsList.sort((a, b) => a.videos - b.videos);
---

<html lang="en">
<head>
  <meta charset="utf-8" />
  <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
  <meta name="viewport" content="width=device-width" />
  <title>YouTube Upload Panel</title>
  
  <!-- Tabulator CSS -->
  <link href="https://unpkg.com/tabulator-tables@5.5.2/dist/css/tabulator_modern.min.css" rel="stylesheet">
  
  <style>
    body {
      font-family: system-ui, sans-serif;
      margin: 0;
      padding: 0;
      background: #f5f5f5;
    }
    
    .header {
      background: white;
      border-bottom: 1px solid #e0e0e0;
      padding: 15px 0;
      margin-bottom: 30px;
    }
    
    .header-content {
      max-width: 1200px;
      margin: 0 auto;
      padding: 0 20px;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    
    .header h1 {
      margin: 0;
      font-size: 24px;
      color: #333;
    }
    
    .nav-menu {
      display: flex;
      gap: 20px;
      align-items: center;
    }
    
    .nav-menu a {
      color: #666;
      text-decoration: none;
      font-size: 14px;
      padding: 5px 10px;
      border-radius: 4px;
      transition: background 0.2s;
    }
    
    .nav-menu a:hover {
      background: #f0f0f0;
    }
    
    .user-info {
      color: #666;
      font-size: 14px;
    }
    
    .user-info strong {
      color: #333;
    }
    
    .badge {
      display: inline-block;
      padding: 2px 8px;
      background: #e3f2fd;
      color: #1976d2;
      border-radius: 12px;
      font-size: 12px;
      margin-left: 5px;
    }
    
    .container {
      max-width: 1200px;
      margin: 0 auto;
      padding: 20px;
    }
    
    .content-box {
      background: white;
      border-radius: 8px;
      padding: 30px;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    
    .account-status {
      background: #f8f9fa;
      padding: 20px;
      border-radius: 8px;
      margin-bottom: 30px;
      border: 1px solid #e9ecef;
    }
    
    .account-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 20px;
    }
    
    .account-header h3 {
      margin: 0;
      color: #495057;
      font-size: 18px;
    }
    
    .account-stats {
      display: flex;
      gap: 20px;
      font-size: 14px;
      color: #6c757d;
    }
    
    .stat-item {
      display: flex;
      align-items: center;
      gap: 5px;
    }
    
    .stat-value {
      font-weight: 600;
      color: #333;
    }
    
    .search-box {
      margin-bottom: 15px;
    }
    
    .search-box input {
      width: 100%;
      padding: 8px 12px;
      border: 1px solid #ced4da;
      border-radius: 4px;
      font-size: 14px;
    }
    
    .search-box input:focus {
      outline: none;
      border-color: #80bdff;
      box-shadow: 0 0 0 0.2rem rgba(0,123,255,.25);
    }
    
    #accounts-table {
      background: white;
      border-radius: 6px;
      overflow: hidden;
    }
    
    .sync-btn {
      padding: 6px 12px;
      background: #28a745;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      font-size: 13px;
      transition: background 0.2s;
    }
    
    .sync-btn:hover {
      background: #218838;
    }
    
    .connect-btn {
      padding: 6px 12px;
      background: #007bff;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      font-size: 13px;
      text-decoration: none;
      display: inline-block;
      transition: background 0.2s;
    }
    
    .connect-btn:hover {
      background: #0056b3;
    }
    
    .no-accounts {
      padding: 40px;
      text-align: center;
      color: #6c757d;
    }
    
    /* Tabulator customization */
    .tabulator {
      font-size: 14px;
    }
    
    .tabulator .tabulator-header {
      background: #f8f9fa;
      border-bottom: 2px solid #dee2e6;
    }
    
    .tabulator-row {
      min-height: 45px;
    }
    
    .tabulator-row:hover {
      background: #f8f9fa !important;
    }
    
    .status-connected {
      color: #28a745;
      font-weight: 500;
    }
    
    .status-disconnected {
      color: #dc3545;
      font-weight: 500;
    }
    .skeleton {
      animation: skeleton-loading 1s linear infinite alternate;
    }
    @keyframes skeleton-loading {
      0% { background-color: #f0f0f0; }
      100% { background-color: #e0e0e0; }
    }
    .skeleton-text {
      height: 16px;
      width: 40px;
      border-radius: 4px;
      display: inline-block;
    }

    .status-suspended {
      color: #fff;
      font-weight: 500;
    }
    .tabulator-row.row-suspended {
      background-color: #8b0000 !important; /* Dark red */
      color: white;
    }
    .tabulator-row.row-suspended:hover {
      background-color: #a00000 !important; /* Slightly lighter on hover */
    }
  </style>
</head>
<body>
  <div class="header">
    <div class="header-content">
      <h1>YouTube Upload Panel</h1>
      <nav class="nav-menu">
        <a href="/videos">Videos</a>  <!-- ADD THIS LINE -->
          {user.groups.includes('admin') && <a href="/accounts">Accounts</a>}
        <div class="user-info">
          <strong>{user.username}</strong>
          <span class="badge">{user.role}</span>
        </div>
        <a href="/api/logout">Logout</a>
      </nav>
    </div>
  </div>

  <div class="container">
    <div class="content-box">
      <div class="account-status">
        <h3>YouTube Account Status</h3>
        <div id="accounts-table"></div>
      </div>

      {accountEmails.some(email => accounts[email].token) && 
       user.groups.includes('uploader') && (
        <UploadForm accounts={accountEmails.filter(email => accounts[email].token)} />
      )}
      
      {!user.groups.includes('uploader') && (
        <div style="padding: 20px; background: #fff3cd; border: 1px solid #ffc107; border-radius: 4px; color: #856404;">
          ‚ö†Ô∏è You don't have upload permissions. Contact an administrator.
        </div>
      )}
    </div>
  </div>

  <!-- Tabulator JS -->
  <script src="https://unpkg.com/tabulator-tables@5.5.2/dist/js/tabulator.min.js"></script>
  


<script define:vars={{ accountsList }}>
    
    window.addEventListener('DOMContentLoaded', () => {
      const table = new Tabulator("#accounts-table", {
        data: accountsList,
        index: "email",
        pagination: true,
        paginationSize: 50,
        rowFormatter: function(row) {  // Add this
          const data = row.getData();
          if (data.suspended) {
            row.getElement().classList.add("row-suspended");
          }
        },
        initialSort: [{column: "videos", dir: "asc"}],
          columns: [
            {
              title: "Email", 
              field: "email", 
              minWidth: 200,
              formatter: function(cell) {
                const value = cell.getValue();
                return `<strong>${value}</strong>`;
              }
            },
            {
              title: "Status", 
              field: "connected", 
              width: 120,
              hozAlign: "center",
              formatter: function(cell) {
                const value = cell.getValue();
                const row = cell.getRow().getData();
                if (row.suspended) {
                  return '<span class="status-suspended">‚õî Suspended</span>';
                }
                if (value) {
                  return '<span class="status-connected">‚úÖ Connected</span>';
                } else {
                  return '<span class="status-disconnected">‚ùå Not Connected</span>';
                }
              }
            },
            {
              title: "Videos", 
              field: "videos", 
              width: 100,
              hozAlign: "center",
              sorter: "number",
              formatter: function(cell) {
                const row = cell.getRow().getData();
                if (row.loading) {
                  return '<div class="skeleton skeleton-text"></div>';  // Show skeleton
                }
                const value = cell.getValue();
                return `<strong>${value}</strong>`;
              }
            },
            {
              title: "Last Updated", 
              field: "lastUpdated",
              width: 150,
              formatter: function(cell) {
                const value = cell.getValue();
                if (!value) return '<span style="color: #999;">Never</span>';
                const date = new Date(value);
                return date.toLocaleDateString('en-US', { 
                  month: 'short', 
                  day: 'numeric', 
                  year: 'numeric' 
                });
              }
            },
            {
              title: "Actions", 
              width: 120,
              hozAlign: "center",
              formatter: function(cell) {
                const row = cell.getRow().getData();
                if (row.connected) {
                  return `<button class="sync-btn" onclick="syncAccount('${row.email}')">üîÑ Sync</button>`;
                } else {
                  return `<a href="/api/auth?setup=${row.email}" class="connect-btn">Connect ‚Üí</a>`;
                }
              }
            }
          ]
      });
      async function loadVideoCounts() {
        for (const account of accountsList) {
          if (account.connected) {
            try {
              const res = await fetch('/api/get-video-count', {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify({email: account.email})
              });
              
              const { count = 0, suspended = false } = await res.json();
              
              // Update the row
              const rowData = table.getRow(account.email).getData();
              rowData.videos = count;
              rowData.loading = false;
              rowData.suspended = suspended;
              table.updateRow(account.email, rowData);
              if (data.suspended) {
                const rowElement = table.getRow(account.email).getElement();
                rowElement.classList.add("row-suspended");
              }

              await fetch('/api/update-account-cache', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                  email: account.email,
                  video_count: count,     
                  suspended: suspended    
                })
              });
              
            } catch (error) {
              // Handle errors
              const rowData = table.getRow(account.email).getData();
              rowData.videos = 0;
              rowData.loading = false;
              table.updateRow(account.email, rowData);
            }
          }
        }
      }


      setTimeout(loadVideoCounts, 100);

    });

  </script>


  <script>
    // Handle upload progress (existing code)
    const form = document.getElementById('upload-form');
    const statusDiv = document.getElementById('upload-status');
    
    if (form) {
      form.addEventListener('submit', async (e) => {
        e.preventDefault();
        
        const formData = new FormData(form);
        const submitButton = form.querySelector('button[type="submit"]');
        submitButton.disabled = true;
        submitButton.textContent = 'Uploading...';
        
        statusDiv.innerHTML = '<div class="uploading">‚è≥ Uploading video...</div>';
        
        try {
          const response = await fetch('/api/upload', {
            method: 'POST',
            body: formData
          });
          
          const result = await response.json();
          
          if (result.success) {
            statusDiv.innerHTML = `
              <div class="success">
                ‚úÖ Video uploaded successfully!<br>
                Video ID: ${result.videoId}<br>
                <a href="https://youtube.com/watch?v=${result.videoId}" target="_blank">View on YouTube ‚Üí</a>
              </div>
            `;
            form.reset();
            
            // Reload page to update video counts
            setTimeout(() => location.reload(), 3000);
          } else {
            statusDiv.innerHTML = `<div class="error">‚ùå Error: ${result.error}</div>`;
          }
        } catch (error) {
          statusDiv.innerHTML = `<div class="error">‚ùå Upload failed: ${error.message}</div>`;
        } finally {
          submitButton.disabled = false;
          submitButton.textContent = 'Upload Video';
        }
      });
    }
  </script>
</body>
</html>