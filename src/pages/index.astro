---
// src/pages/index.astro
import UploadForm from '../components/UploadForm.astro';
import { loadAccounts } from '../lib/youtube.js';

// Get user from request (set by middleware)
const user = Astro.request.user;

// If no user (shouldn't happen due to middleware), redirect to login
if (!user) {
  return Astro.redirect('/login');
}

const accounts = loadAccounts();
const accountEmails = Object.keys(accounts);
---

<html lang="en">
<head>
  <meta charset="utf-8" />
  <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
  <meta name="viewport" content="width=device-width" />
  <title>YouTube Upload Panel</title>
  <style>
    body {
      font-family: system-ui, sans-serif;
      margin: 0;
      padding: 0;
      background: #f5f5f5;
    }
    
    .header {
      background: white;
      border-bottom: 1px solid #e0e0e0;
      padding: 15px 0;
      margin-bottom: 30px;
    }
    
    .header-content {
      max-width: 1200px;
      margin: 0 auto;
      padding: 0 20px;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    
    .header h1 {
      margin: 0;
      font-size: 24px;
      color: #333;
    }
    
    .nav-menu {
      display: flex;
      gap: 20px;
      align-items: center;
    }
    
    .nav-menu a {
      color: #666;
      text-decoration: none;
      font-size: 14px;
      padding: 5px 10px;
      border-radius: 4px;
      transition: background 0.2s;
    }
    
    .nav-menu a:hover {
      background: #f0f0f0;
    }
    
    .user-info {
      color: #666;
      font-size: 14px;
    }
    
    .user-info strong {
      color: #333;
    }
    
    .badge {
      display: inline-block;
      padding: 2px 8px;
      background: #e3f2fd;
      color: #1976d2;
      border-radius: 12px;
      font-size: 12px;
      margin-left: 5px;
    }
    
    .container {
      max-width: 800px;
      margin: 0 auto;
      padding: 20px;
    }
    
    .content-box {
      background: white;
      border-radius: 8px;
      padding: 30px;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    
    .account-status {
      background: #f8f9fa;
      padding: 20px;
      border-radius: 8px;
      margin-bottom: 30px;
      border: 1px solid #e9ecef;
    }
    
    .account-status h3 {
      margin-top: 0;
      color: #495057;
      font-size: 18px;
    }
    
    .account-item {
      padding: 12px;
      margin: 8px 0;
      background: white;
      border-radius: 6px;
      display: flex;
      justify-content: space-between;
      align-items: center;
      border: 1px solid #dee2e6;
    }
    
    .status-badge {
      padding: 4px 12px;
      border-radius: 4px;
      font-size: 13px;
      font-weight: 500;
    }
    
    .status-active {
      background: #d4edda;
      color: #155724;
    }
    
    .status-inactive {
      background: #f8d7da;
      color: #721c24;
    }
    
    .auth-link {
      color: #007bff;
      text-decoration: none;
      font-size: 14px;
      padding: 4px 12px;
      border: 1px solid #007bff;
      border-radius: 4px;
      transition: all 0.2s;
    }
    
    .auth-link:hover {
      background: #007bff;
      color: white;
    }
    
    .no-accounts {
      padding: 40px;
      text-align: center;
      color: #6c757d;
    }
  </style>
</head>
<body>
  <div class="header">
    <div class="header-content">
      <h1>üé• YouTube Upload Panel</h1>
      <nav class="nav-menu">
        <a href="/">üì§ Upload</a>
        {user.groups.includes('admin') && (
          <a href="/accounts">üë• Accounts</a>
        )}
        <div class="user-info">
          <strong>{user.username}</strong>
          <span class="badge">{user.role}</span>
        </div>
        <a href="/api/logout">üö™ Logout</a>
      </nav>
    </div>
  </div>

  <div class="container">
    <div class="content-box">
      <div class="account-status">
        <h3>YouTube Account Status</h3>
        {accountEmails.length === 0 ? (
          <div class="no-accounts">
            <p>No YouTube accounts configured.</p>
            <p>Add accounts to accounts_db.json file.</p>
          </div>
        ) : (
          accountEmails.map(email => {
            const hasToken = accounts[email].token !== null;
            const videoCount = accounts[email].video_count || 0;
            return (
              <div class="account-item">
                <div>
                  <span>{email}</span>
                  {hasToken && (
                    <span style="margin-left: 10px; color: #6c757d; font-size: 13px;">
                      ({videoCount} videos)
                    </span>
                  )}
                </div>
                {hasToken ? (
                  <span class="status-badge status-active">‚úì Connected</span>
                ) : (
                  <a href={`/api/auth?setup=${email}`} class="auth-link">Connect ‚Üí</a>
                )}
              </div>
            );
          })
        )}
      </div>

      {accountEmails.some(email => accounts[email].token) && 
       user.groups.includes('uploader') && (
        <UploadForm accounts={accountEmails.filter(email => accounts[email].token)} />
      )}
      
      {!user.groups.includes('uploader') && (
        <div style="padding: 20px; background: #fff3cd; border: 1px solid #ffc107; border-radius: 4px; color: #856404;">
          ‚ö†Ô∏è You don't have upload permissions. Contact an administrator.
        </div>
      )}
    </div>
  </div>

  <script>
    // Handle upload progress
    const form = document.getElementById('upload-form');
    const statusDiv = document.getElementById('upload-status');
    
    if (form) {
      form.addEventListener('submit', async (e) => {
        e.preventDefault();
        
        const formData = new FormData(form);
        const submitButton = form.querySelector('button[type="submit"]');
        submitButton.disabled = true;
        submitButton.textContent = 'Uploading...';
        
        statusDiv.innerHTML = '<div class="uploading">‚è≥ Uploading video...</div>';
        
        try {
          const response = await fetch('/api/upload', {
            method: 'POST',
            body: formData
          });
          
          const result = await response.json();
          
          if (result.success) {
            statusDiv.innerHTML = `
              <div class="success">
                ‚úÖ Video uploaded successfully!<br>
                Video ID: ${result.videoId}<br>
                <a href="https://youtube.com/watch?v=${result.videoId}" target="_blank">View on YouTube ‚Üí</a>
              </div>
            `;
            form.reset();
          } else {
            statusDiv.innerHTML = `<div class="error">‚ùå Error: ${result.error}</div>`;
          }
        } catch (error) {
          statusDiv.innerHTML = `<div class="error">‚ùå Upload failed: ${error.message}</div>`;
        } finally {
          submitButton.disabled = false;
          submitButton.textContent = 'Upload Video';
        }
      });
    }
  </script>
</body>
</html>