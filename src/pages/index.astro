---
import Layout from '../layouts/Layout.astro';
import { getUser } from '../lib/auth';

// Check authentication
const user = getUser(Astro);
if (!user) {
  return Astro.redirect(`/login?redirect=${Astro.url.pathname}`);
}

// Check if user is in uploader group
const isUploader = user.groups && user.groups.includes('uploader');
const isAdmin = user.role === 'admin' || (user.groups && user.groups.includes('admin'));

// Get YouTube accounts based on user permissions
let accounts = [];
if (!isUploader) {  // Only load accounts for non-uploader users
  if (isAdmin) {
    // Admin can see all accounts
    const { getAccounts } = await import('../lib/youtube');
    accounts = await getAccounts();
  } else if (user.allowedAccounts && user.allowedAccounts.length > 0) {
    // User can only see their allowed accounts
    const { getAccounts } = await import('../lib/youtube');
    const allAccounts = await getAccounts();
    accounts = allAccounts.filter(acc => 
      user.allowedAccounts.includes(acc.channelName)
    );
  }
}
---

<Layout title="YouTube Upload Panel">
  <main>
    <div class="header">
      <h1>YouTube Upload Panel</h1>
      <div class="user-info">
        Logged in as: <strong>{user.username}</strong> 
        {user.role && <span>({user.role})</span>}
        {user.groups && user.groups.length > 0 && (
          <span class="groups">[{user.groups.join(', ')}]</span>
        )}
        <a href="/api/logout" class="logout-btn">Logout</a>
      </div>
    </div>

    {isUploader && !isAdmin ? (
      <!-- Uploader-only UI (not admin+uploader) -->
      <div class="upload-form">
        <h2>Upload Compressed Files</h2>
        
        <form id="uploadForm" enctype="multipart/form-data">
          <div class="form-group">
            <label for="file">Choose Compressed File:</label>
            <input 
              type="file" 
              id="file" 
              name="file" 
              accept=".zip,.rar,.7z"
              required
            />
            <small>Accepts: ZIP, RAR, 7Z files containing video folders</small>
          </div>

          <div class="form-group">
            <label for="timestamps">Timestamps/Sections:</label>
            <textarea 
              id="timestamps" 
              name="timestamps"
              rows="10"
              placeholder="00:00 Introduction&#10;02:30 Main Topic&#10;05:45 Conclusion"
            ></textarea>
            <small>These timestamps will be saved as sections.txt in each video folder</small>
          </div>

          <button type="submit" id="uploadBtn">Upload</button>
          
          <div id="status" class="status-message"></div>
        </form>
      </div>
    ) : isAdmin ? (
      <!-- Admin UI - can do both if in both groups -->
      <div class="admin-dashboard">
        {user.groups.includes('uploader') && (
          <div class="upload-form">
            <h2>Upload Compressed Files (Uploader Mode)</h2>
            
            <form id="uploaderForm" enctype="multipart/form-data">
              <div class="form-group">
                <label for="file">Choose Compressed File:</label>
                <input 
                  type="file" 
                  id="file" 
                  name="file" 
                  accept=".zip,.rar,.7z"
                  required
                />
              </div>

              <div class="form-group">
                <label for="timestamps">Timestamps/Sections:</label>
                <textarea 
                  id="timestamps" 
                  name="timestamps"
                  rows="5"
                  placeholder="00:00 Introduction&#10;02:30 Main Topic"
                ></textarea>
              </div>

              <button type="submit">Upload Compressed</button>
            </form>
            
            <hr style="margin: 30px 0;" />
          </div>
        )}
        
        <div class="upload-form">
          <h2>Upload Video to YouTube</h2>
          
          <form id="youtubeForm" enctype="multipart/form-data">
            <div class="form-group">
              <label for="account">YouTube Account:</label>
              <select id="account" name="account" required>
                <option value="">Select an account...</option>
                {accounts.map(account => (
                  <option value={account.channelName}>
                    {account.channelName} ({account.email})
                  </option>
                ))}
              </select>
            </div>

            <div class="form-group">
              <label for="title">Video Title:</label>
              <input type="text" id="title" name="title" required />
            </div>

            <div class="form-group">
              <label for="description">Description:</label>
              <textarea id="description" name="description" rows="5"></textarea>
            </div>

            <div class="form-group">
              <label for="tags">Tags (comma separated):</label>
              <input type="text" id="tags" name="tags" 
                placeholder="gaming, tutorial, guide" />
            </div>

            <div class="form-group">
              <label for="privacy">Privacy:</label>
              <select id="privacy" name="privacy">
                <option value="private">Private</option>
                <option value="unlisted">Unlisted</option>
                <option value="public">Public</option>
              </select>
            </div>

            <div class="form-group">
              <label for="timestamps">Timestamps/Sections (optional):</label>
              <textarea id="timestamps" name="timestamps" rows="5"
                placeholder="00:00 Introduction&#10;02:30 Main Topic&#10;05:45 Conclusion"></textarea>
            </div>

            <div class="form-group">
              <label for="video">Video File:</label>
              <input type="file" id="video" name="video" 
                accept="video/*" required />
            </div>

            <button type="submit">Upload to YouTube</button>
          </form>
        </div>
        
        <div class="admin-section">
          <h3>Admin Actions</h3>
          <a href="/admin/users" class="btn">Manage Users</a>
          <a href="/admin/accounts" class="btn">Manage YouTube Accounts</a>
        </div>
      </div>
    ) : (
      <!-- Regular User UI -->
      <div class="upload-form">
        <h2>Upload Video to YouTube</h2>
        
        {accounts.length === 0 ? (
          <div class="no-accounts">
            <p>No YouTube accounts available for your user.</p>
            <p>Please contact an administrator to grant access.</p>
          </div>
        ) : (
          <form id="uploadForm" enctype="multipart/form-data">
            <div class="form-group">
              <label for="account">YouTube Account:</label>
              <select id="account" name="account" required>
                <option value="">Select an account...</option>
                {accounts.map(account => (
                  <option value={account.channelName}>
                    {account.channelName} ({account.email})
                  </option>
                ))}
              </select>
            </div>

            <div class="form-group">
              <label for="title">Video Title:</label>
              <input type="text" id="title" name="title" required />
            </div>

            <div class="form-group">
              <label for="description">Description:</label>
              <textarea id="description" name="description" rows="5"></textarea>
            </div>

            <div class="form-group">
              <label for="tags">Tags (comma separated):</label>
              <input type="text" id="tags" name="tags" 
                placeholder="gaming, tutorial, guide" />
            </div>

            <div class="form-group">
              <label for="privacy">Privacy:</label>
              <select id="privacy" name="privacy">
                <option value="private">Private</option>
                <option value="unlisted">Unlisted</option>
                <option value="public">Public</option>
              </select>
            </div>

            <div class="form-group">
              <label for="timestamps">Timestamps/Sections (optional):</label>
              <textarea id="timestamps" name="timestamps" rows="5"
                placeholder="00:00 Introduction&#10;02:30 Main Topic&#10;05:45 Conclusion"></textarea>
            </div>

            <div class="form-group">
              <label for="video">Video File:</label>
              <input type="file" id="video" name="video" 
                accept="video/*" required />
            </div>

            <button type="submit" id="uploadBtn">Upload to YouTube</button>
            
            <div id="status" class="status-message"></div>
          </form>
        )}
      </div>
    )}
  </main>
</Layout>

<style>
  main {
    max-width: 800px;
    margin: 0 auto;
    padding: 20px;
  }

  .header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 30px;
    padding-bottom: 20px;
    border-bottom: 1px solid #ddd;
  }

  .user-info {
    display: flex;
    align-items: center;
    gap: 10px;
  }

  .groups {
    color: #666;
    font-size: 14px;
  }

  .logout-btn {
    background: #dc3545;
    color: white;
    padding: 5px 15px;
    text-decoration: none;
    border-radius: 4px;
    font-size: 14px;
    margin-left: 10px;
  }

  .logout-btn:hover {
    background: #c82333;
  }

  .upload-form, .admin-dashboard {
    background: white;
    padding: 30px;
    border-radius: 8px;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
  }

  .form-group {
    margin-bottom: 20px;
  }

  label {
    display: block;
    margin-bottom: 5px;
    font-weight: 600;
    color: #333;
  }

  input[type="text"],
  input[type="file"],
  select,
  textarea {
    width: 100%;
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 4px;
    font-size: 14px;
  }

  textarea {
    resize: vertical;
    font-family: monospace;
  }

  small {
    display: block;
    margin-top: 5px;
    color: #666;
    font-size: 12px;
  }

  button[type="submit"], button {
    background: #28a745;
    color: white;
    padding: 12px 30px;
    border: none;
    border-radius: 4px;
    font-size: 16px;
    cursor: pointer;
    transition: background 0.3s;
  }

  button[type="submit"]:hover, button:hover {
    background: #218838;
  }

  button[type="submit"]:disabled, button:disabled {
    background: #6c757d;
    cursor: not-allowed;
  }

  .status-message {
    margin-top: 20px;
    padding: 10px;
    border-radius: 4px;
    display: none;
  }

  .status-message.show {
    display: block;
  }

  .status-message.success {
    background: #d4edda;
    color: #155724;
    border: 1px solid #c3e6cb;
  }

  .status-message.error {
    background: #f8d7da;
    color: #721c24;
    border: 1px solid #f5c6cb;
  }

  .no-accounts {
    text-align: center;
    padding: 40px;
    background: #f8f9fa;
    border-radius: 8px;
  }

  .admin-section {
    margin-top: 30px;
    padding: 20px;
    background: #f8f9fa;
    border-radius: 8px;
  }

  .admin-section h3 {
    margin-bottom: 15px;
  }

  .btn {
    display: inline-block;
    padding: 8px 16px;
    margin-right: 10px;
    background: #007bff;
    color: white;
    text-decoration: none;
    border-radius: 4px;
  }

  .btn:hover {
    background: #0056b3;
  }
</style>

<script>
  // Handle all forms
  document.querySelectorAll('form').forEach(form => {
    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const submitBtn = form.querySelector('button[type="submit"], button');
      const originalText = submitBtn.textContent;
      let statusDiv = form.querySelector('.status-message');
      
      // Create status div if not exists
      if (!statusDiv) {
        statusDiv = document.createElement('div');
        statusDiv.className = 'status-message';
        form.appendChild(statusDiv);
      }
      
      // Disable button and show loading
      submitBtn.disabled = true;
      submitBtn.textContent = 'Uploading...';
      statusDiv.className = 'status-message';
      statusDiv.textContent = '';
      
      const formData = new FormData(form);
      
      try {
        const response = await fetch('/api/upload', {
          method: 'POST',
          body: formData
        });
        
        const result = await response.json();
        
        if (result.success) {
          statusDiv.className = 'status-message show success';
          statusDiv.textContent = result.message || 'Upload successful!';
          
          if (result.videoId) {
            statusDiv.innerHTML += `<br>YouTube Video ID: ${result.videoId}`;
            statusDiv.innerHTML += `<br><a href="https://youtube.com/watch?v=${result.videoId}" target="_blank">View on YouTube</a>`;
          }
          
          form.reset();
        } else {
          statusDiv.className = 'status-message show error';
          statusDiv.textContent = 'Error: ' + (result.error || 'Upload failed');
        }
      } catch (error) {
        statusDiv.className = 'status-message show error';
        statusDiv.textContent = 'Upload failed: ' + error.message;
      } finally {
        submitBtn.disabled = false;
        submitBtn.textContent = originalText;
      }
    });
  });
</script>