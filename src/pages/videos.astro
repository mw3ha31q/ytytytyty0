---
// src/pages/videos.astro
const user = Astro.request.user;

if (!user) {
  return Astro.redirect('/login');
}

// Videos will be loaded via API from server storage
---

<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width" />
  <title>Uploaded Videos - YouTube Upload Panel</title>
  
  <style>
    body {
      font-family: system-ui, sans-serif;
      margin: 0;
      padding: 0;
      background: #f5f5f5;
    }
    
    .header {
      background: white;
      border-bottom: 1px solid #e0e0e0;
      padding: 15px 0;
      margin-bottom: 30px;
    }
    
    .header-content {
      max-width: 1200px;
      margin: 0 auto;
      padding: 0 20px;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    
    .nav-menu {
      display: flex;
      gap: 20px;
      align-items: center;
    }
    
    .nav-menu a {
      color: #666;
      text-decoration: none;
      padding: 5px 10px;
      border-radius: 4px;
    }
    
    .nav-menu a.active {
      background: #f0f0f0;
      color: #333;
    }
    
    .container {
      max-width: 1200px;
      margin: 0 auto;
      padding: 20px;
    }
    

.videos-grid {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: 20px;
}

    .video-card {
        width: 100%;
        margin-bottom: 20px;
    }

    .videos-grid {
        transition: all 0.3s ease;
    }

    .video-card {
        transition: transform 0.2s ease, box-shadow 0.2s ease;
    }
    

    .video-card {
      background: white;
      border-radius: 8px;
      overflow: hidden;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
      transition: transform 0.2s;
      cursor: pointer;
    }
    
    .video-card:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 8px rgba(0,0,0,0.15);
    } 

.video-thumbnail {
  width: 64px !important;
  height: 64px !important;
  /* rest of your styles */
}

.video-thumbnail img {
  width: 64px !important;
  height: 64px !important;
  max-width: none !important; /* Override Bootstrap's max-width: 100% */
  object-fit: cover !important;
}

.play-overlay {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 24px;  /* Reduced from 60px */
  height: 24px; /* Reduced from 60px */
  background: rgba(0,0,0,0.7);
  border-radius: 50%;
  /* rest stays same */
}

.play-overlay::after {
  border-left: 8px solid white;  /* Reduced from 20px */
  border-top: 5px solid transparent;  /* Reduced from 12px */
  border-bottom: 5px solid transparent;  /* Reduced from 12px */
  margin-left: 2px;  /* Reduced from 4px */
}
    .video-info {
      padding: 15px;
    }
    
    .video-title {
      font-weight: 500;
      margin: 0 0 8px 0;
      overflow: hidden;
      text-overflow: ellipsis;
      display: -webkit-box;
      -webkit-line-clamp: 2;
      -webkit-box-orient: vertical;
    }
    
    .video-meta {
      font-size: 13px;
      color: #666;
      display: flex;
      justify-content: space-between;
      margin-bottom: 10px;
    }
    
    .video-actions {
      display: flex;
      gap: 10px;
    }
    
    .btn {
      padding: 6px 12px;
      border: 1px solid #ddd;
      border-radius: 4px;
      font-size: 13px;
      cursor: pointer;
      background: white;
      text-decoration: none;
      color: #333;
    }
    
    .btn:hover {
      background: #f0f0f0;
    }
    
    .btn-delete {
      color: #dc3545;
      border-color: #dc3545;
    }
    
    .btn-delete:hover {
      background: #dc3545;
      color: white;
    }
    
    .loading {
      text-align: center;
      padding: 40px;
      color: #666;
    }
    
    .empty {
      text-align: center;
      padding: 60px;
      color: #666;
    }
    
    /* Video player modal */
    .modal {
      display: none;
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0,0,0,0.9);
      z-index: 1000;
      align-items: center;
      justify-content: center;
    }
    
    .modal.active {
      display: flex;
    }
    
    .modal-content {
      max-width: 90%;
      max-height: 90%;
      position: relative;
    }
    
    .modal video {
      max-width: 100%;
      max-height: 80vh;
    }
    
    .modal-close {
      position: absolute;
      top: -40px;
      right: 0;
      color: white;
      font-size: 30px;
      cursor: pointer;
      background: none;
      border: none;
    }


  </style>
  <link
  href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css"
  rel="stylesheet"/>

</head>
<body>
  <div class="header">
    <div class="header-content">
      <h1>YouTube Upload Panel</h1>
      <nav class="nav-menu">
        <a href="/">Upload</a>
        <a href="/videos" class="active">Videos</a>
        {user.groups.includes('admin') && <a href="/accounts">Accounts</a>}
        <a href="/api/logout">Logout</a>
      </nav>
    </div>
  </div>

    <div class="container">
    <h2 class="mb-4">Uploaded Videos</h2>
    <div class="row g-4" id="videos-container">
        <div class="loading text-center">Loading videos...</div>
    </div>
    </div>


  <!-- Video player modal -->
  <div id="video-modal" class="modal">
    <div class="modal-content">
      <button class="modal-close" onclick="closeModal()">&times;</button>
      <video id="modal-video" controls></video>
    </div>
  </div>

  <script>
    let currentVideos = [];
    
    async function loadVideos() {
      const container = document.getElementById('videos-container');
      
      try {
        const response = await fetch('/api/list-videos');
        const data = await response.json();
        
        if (!data.videos || data.videos.length === 0) {
          container.innerHTML = '<div class="empty">No videos uploaded yet</div>';
          return;
        }
        
        currentVideos = data.videos;
        renderVideos(data.videos);
      } catch (error) {
        container.innerHTML = '<div class="empty">Error loading videos</div>';
        console.error('Error:', error);
      }
    }
    
   /* function renderVideos(videos) {
      const container = document.getElementById('videos-container');
      const grid = document.createElement('div');
      grid.className = 'videos-grid';
      
      videos.forEach(video => {
        const card = createVideoCard(video);
        grid.appendChild(card);
      });
      
      container.innerHTML = '';
      container.appendChild(grid);
    } */

    function renderVideos(videos) {
    const container = document.getElementById('videos-container');
    container.innerHTML = '';

    videos.forEach(video => {
        const col = document.createElement('div');
        col.className = 'col-12 col-md-6 col-lg-4'; // 3-column on lg, 2-column on md, 1-column on mobile

        const card = createVideoCard(video);
        col.appendChild(card);
        container.appendChild(col);
    });
    }

    
    function createVideoCard(video) {
    const card = document.createElement('div');
    card.className = 'video-card';
    
    // Use existing PNG thumbnail if available, otherwise use generated thumbnail
    const thumbnailSrc = video.hasExistingThumb 
        ? `/api/video-thumbnail/${video.existingThumbPath}`
        : `/api/video-thumbnail/${video.filename}`;
    
    card.innerHTML = `
        <div class="video-thumbnail" onclick="playVideo('${video.filename}')">
        <img src="${thumbnailSrc}" alt="${video.title}" />
        <div class="play-overlay"></div>
        </div>
        <div class="video-info">
        <h3 class="video-title">${video.title}</h3>
        <div class="video-meta">
            <span>${video.category} / ${video.folder}</span>
            <span>${formatFileSize(video.size)}</span>
        </div>
        <div class="video-meta">
            <span>${formatDate(video.uploadedAt)}</span>
        </div>
        <div class="video-actions">
            <a href="/api/video-file/${video.filename}" class="btn" download>Download</a>
            <button class="btn btn-delete" onclick="deleteVideo('${video.filename}', event)">Delete</button>
        </div>
        </div>
    `;
    
    return card;
    }
    
    function playVideo(filename) {
      const modal = document.getElementById('video-modal');
      const video = document.getElementById('modal-video');
      video.src = `/api/video-file/${filename}`;
      modal.classList.add('active');
      video.play();
    }
    
    function closeModal() {
      const modal = document.getElementById('video-modal');
      const video = document.getElementById('modal-video');
      video.pause();
      video.src = '';
      modal.classList.remove('active');
    }
    
    async function deleteVideo(filename, event) {
      event.stopPropagation();
      
      if (!confirm(`Delete video: ${filename}?`)) return;
      
      try {
        const response = await fetch('/api/delete-video', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ filename })
        });
        
        if (response.ok) {
          loadVideos(); // Reload the list
        } else {
          alert('Failed to delete video');
        }
      } catch (error) {
        alert('Error deleting video');
      }
    }
    
    function formatFileSize(bytes) {
      if (!bytes) return 'Unknown size';
      const mb = bytes / (1024 * 1024);
      return mb.toFixed(1) + ' MB';
    }
    
    function formatDate(timestamp) {
      if (!timestamp) return 'Unknown date';
      const date = new Date(timestamp);
      return date.toLocaleDateString();
    }
    
    // Close modal on background click
    document.getElementById('video-modal').addEventListener('click', (e) => {
      if (e.target.id === 'video-modal') {
        closeModal();
      }
    });
    
    // Load videos on page load
    loadVideos();
  </script>
  
</body>
</html>