---
import Layout from '../layouts/Layout.astro';
import { loadAccounts } from '../lib/youtube.js';

// Auth check
const cookieHeader = Astro.request.headers.get('cookie') || '';
// Simple auth check - middleware already verified

const accounts = loadAccounts();
const accountsList = Object.entries(accounts)
  .map(([email, data]) => ({
    email,
    connected: !!data.token,
    videos: data.video_count || 0,
    lastUpdated: data.last_updated || null
  }))
  .sort((a, b) => a.videos - b.videos);

const totalVideos = accountsList.reduce((sum, a) => sum + a.videos, 0);
const connectedCount = accountsList.filter(a => a.connected).length;
---

<Layout title="Accounts Management">
  <div class="container">
    <header>
      <h1>YouTube Accounts</h1>
      <nav>
        <a href="/">Upload</a>
        <a href="/api/logout">Logout</a>
      </nav>
    </header>

    <div class="stats">
      <div class="stat">
        <span class="value">{accountsList.length}</span>
        <span class="label">Total</span>
      </div>
      <div class="stat">
        <span class="value">{connectedCount}</span>
        <span class="label">Connected</span>
      </div>
      <div class="stat">
        <span class="value">{totalVideos}</span>
        <span class="label">Videos</span>
      </div>
    </div>

    <div class="controls">
      <input type="text" id="search" placeholder="Search...">
      <button id="sync-all">Sync All</button>
    </div>

    <div id="table-container"></div>
  </div>

  <!-- Use Tabulator - lightweight table library -->
  <link href="https://unpkg.com/tabulator-tables@5.5.2/dist/css/tabulator.min.css" rel="stylesheet">
  <script src="https://unpkg.com/tabulator-tables@5.5.2/dist/js/tabulator.min.js"></script>
  
  <script define:vars={{ accountsList }}>
    // Initialize Tabulator
    const table = new Tabulator("#table-container", {
      data: accountsList,
      layout: "fitColumns",
      responsiveLayout: "hide",
      pagination: true,
      paginationSize: 20,
      initialSort: [
        {column: "videos", dir: "asc"}
      ],
      columns: [
        {title: "Email", field: "email", headerFilter: "input"},
        {title: "Status", field: "connected", formatter: function(cell) {
          return cell.getValue() ? "✅ Connected" : "❌ Not Connected";
        }},
        {title: "Videos", field: "videos", sorter: "number"},
        {title: "Last Updated", field: "lastUpdated", formatter: function(cell) {
          const val = cell.getValue();
          if (!val) return "Never";
          const date = new Date(val);
          return date.toLocaleDateString();
        }},
        {title: "Actions", formatter: function(cell) {
          const row = cell.getRow().getData();
          if (row.connected) {
            return `<button onclick="syncAccount('${row.email}')">Sync</button>`;
          }
          return `<a href="/api/auth?setup=${row.email}">Connect</a>`;
        }, width: 150, hozAlign: "center"}
      ]
    });
    
    // Search functionality
    document.getElementById("search").addEventListener("input", function(e) {
      table.setFilter("email", "like", e.target.value);
    });
    
    // Sync functions
    window.syncAccount = async (email) => {
      const res = await fetch('/api/sync-counts', {
        method: 'POST',
        headers: {'Content-Type': 'application/json'},
        body: JSON.stringify({email})
      });
      if (res.ok) location.reload();
    };
    
    document.getElementById("sync-all").addEventListener("click", async () => {
      if (confirm("Sync all accounts?")) {
        const res = await fetch('/api/sync-counts', {method: 'POST'});
        if (res.ok) location.reload();
      }
    });
  </script>

  <style>
    .container {
      max-width: 1200px;
      margin: 0 auto;
      padding: 20px;
    }
    
    header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 30px;
    }
    
    nav {
      display: flex;
      gap: 20px;
    }
    
    nav a {
      color: #666;
      text-decoration: none;
    }
    
    .stats {
      display: flex;
      gap: 30px;
      margin-bottom: 30px;
    }
    
    .stat {
      display: flex;
      flex-direction: column;
      align-items: center;
      padding: 20px;
      background: #f5f5f5;
      border-radius: 8px;
      flex: 1;
    }
    
    .stat .value {
      font-size: 32px;
      font-weight: bold;
    }
    
    .stat .label {
      color: #666;
      font-size: 14px;
    }
    
    .controls {
      display: flex;
      gap: 10px;
      margin-bottom: 20px;
    }
    
    #search {
      flex: 1;
      padding: 10px;
      border: 1px solid #ddd;
      border-radius: 4px;
    }
    
    button {
      padding: 10px 20px;
      background: #007bff;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
    }
    
    button:hover {
      background: #0056b3;
    }
  </style>
</Layout>